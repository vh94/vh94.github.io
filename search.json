[
  {
    "objectID": "Rprogramming.html",
    "href": "Rprogramming.html",
    "title": "R Programming",
    "section": "",
    "text": "The factorial of a non-negative integer \\(n\\) , denoted by \\(n!\\), is the product of all positive integers less than or equal to \\(n\\).\n\\[n! = \\prod^{n}_{i=1}{i.}\\]\n\nrecursiveFactorial <-Vectorize( \n  function(n) {\n  ifelse(n==0,1,n*recursiveFactorial(n-1))\n  }\n)\n\npar(bg = \"#fcfcfc\")\nrecursiveFactorial(1:10) |> plot(type=\"l\",log='y')\n\n\n\n\n\n\n\nThere are \\(n!\\) different ways of arranging \\(n\\) distinct objects into a sequence\n\\[\\binom nk=\\frac{n!}{k!(n-k)!} \\quad \\textrm{for}\\quad  0 \\le k \\le n,\\]\n\nbin  <- function(n,k) {\n  recursiveFactorial(n)/(recursiveFactorial(k)*recursiveFactorial(n-k))\n}\n\nbases <- c(\"A\",\"T\",\"G\",\"C\")\nbin(length(bases),3)\n\n[1] 4\n\n\n\n\n\nA\nA\nA\nT\n\n\nT\nT\nG\nG\n\n\nG\nC\nC\nC\n\n\n\n\n\n\nA bruteforce solution I did to train a little bit on my programming.\n\n\nM_ind converts between single matrix index and x,y indices\n\n# convert single index v_i to i,j \nM_ind <- function(v_i) {\n  i = 9 # dim of sudoku\n  i_m = ifelse(v_i%%i,v_i%%i,i)\n  return(c(i_m,ceiling(v_i/i)))\n}\n\nI found this solution a while ago by answering a stackoverflow question.\nGetting the 3x3 “boxes” of the sudoku:\n\n# create boxes\nboxes <- matrix(\n  sapply(list(1:3,4:6,7:9),rep,3,each=3),\n  9,byrow = TRUE\n)\n\nthere might be a more elegant way, but this will do it for now…\n\n\n\nChecking if the number at x,y is unique in its row, column and box.\n\nis_valid <- function(X,Y,board,boxes) {\n  box   <- boxes[X,Y] \n  if (any(duplicated(board[X,],incomparables = 0))) {\n    return(FALSE)\n  } else if (any(duplicated(board[,Y],incomparables = 0))) {\n    return(FALSE)\n  } else if (any(duplicated(board[boxes==box],incomparables = 0))){\n    return(FALSE)\n  } else {\n    return(TRUE)\n  } \n}\n\n\nusing apply here would have made the whole thing even slower :(\n\nNow the depth first search algorithm.\n\nsolve_sudoku <- function(sudoku) {\n  empty = which(sudoku == 0) # obtain empty pos\n  S = length(empty) + 1      # steps\n  N = 1                      # Step\n  while (N < S) {\n    i = M_ind(empty[N])      # row col index of empty pos\n    while (TRUE) {\n    sudoku[empty[N]] = sudoku[empty[N]] + 1\n    check = is_valid(X=i[1],Y=i[2],board=sudoku,boxes = boxes) \n    if(sudoku[empty[N]] > 9){\n        sudoku[empty[N]] = 0 # reset\n        N = N - 1            # go back\n        break\n      }\n      if(check) {\n        N = N + 1           # proceed\n        break\n      }\n    }\n  }\n  return(sudoku)\n}\n\nLets run it:\n\nsudoku <- matrix(data=c(\n  6,0,0,2,1,0,0,3,0,\n  5,0,9,0,0,0,6,0,0,\n  2,0,0,9,7,0,0,0,4,\n  0,0,2,3,0,4,0,0,0,\n  0,6,0,0,5,0,0,9,0,\n  0,0,0,1,0,9,7,0,0,\n  9,0,0,0,3,8,0,0,6,\n  0,0,7,0,0,0,2,0,5,\n  0,8,0,0,4,2,0,0,9), nrow=9, ncol=9, byrow=FALSE\n)# i borrowed this sudoku example from Rbloggers \n\nsolution <- solve_sudoku(sudoku = sudoku)\nsolution\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]    6    5    2    7    3    8    9    4    1\n [2,]    4    7    1    9    6    5    2    3    8\n [3,]    8    9    3    2    1    4    5    7    6\n [4,]    2    4    9    3    8    1    7    6    5\n [5,]    1    8    7    6    5    2    3    9    4\n [6,]    5    3    6    4    7    9    8    1    2\n [7,]    9    6    8    5    4    7    1    2    3\n [8,]    3    2    5    1    9    6    4    8    7\n [9,]    7    1    4    8    2    3    6    5    9\n\n\n\n\n\n\n# boxes \nsapply(list(1,2,3,4,5,6,7,8,9),\\(i){sum(solution[boxes==i])})\n\n[1] 45 45 45 45 45 45 45 45 45\n\n\n\n# rows n cols\nrowSums(solution);colSums(solution)\n\n[1] 45 45 45 45 45 45 45 45 45\n\n\n[1] 45 45 45 45 45 45 45 45 45\n\n\n\n# total\nsum(rep(1:9,9))==sum(solution)\n\n[1] TRUE\n\n\nThats it!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "This is a personal Website containing thoughts about biology, programming and statistics.\n\nThe page is realized with quarto and hosted via github."
  }
]