[
  {
    "objectID": "Rprogramming.html",
    "href": "Rprogramming.html",
    "title": "R Programming",
    "section": "",
    "text": "The factorial of a non-negative integer \\(n\\) , denoted by \\(n!\\), is the product of all positive integers less than or equal to \\(n\\).\n\\[n! = \\prod^{n}_{i=1}{i.}\\]\n\nrecursiveFactorial <-Vectorize( \n  function(n) {\n  ifelse(n==0,1,n*recursiveFactorial(n-1))\n  }\n)\n\npar(bg = \"#fcfcfc\")\nrecursiveFactorial(1:10) |> plot(type=\"l\",log='y')\n\n\n\n\n\n\n\nThere are \\(n!\\) different ways of arranging \\(n\\) distinct objects into a sequence\n\\[\\binom nk=\\frac{n!}{k!(n-k)!} \\quad \\textrm{for}\\quad  0 \\le k \\le n,\\]\n\nbin  <- function(n,k) {\n  recursiveFactorial(n)/(recursiveFactorial(k)*recursiveFactorial(n-k))\n}\n\nbases <- c(\"A\",\"T\",\"G\",\"C\")\nbin(length(bases),3)\n\n[1] 4\n\n\n\n\n\nA\nA\nA\nT\n\n\nT\nT\nG\nG\n\n\nG\nC\nC\nC"
  },
  {
    "objectID": "Rprogramming.html#testing",
    "href": "Rprogramming.html#testing",
    "title": "R Programming",
    "section": "Testing",
    "text": "Testing\nLets test the implementation on three example sudoku with increasing difficulty\n\n\n\n\n\n \n \n\n6\n5\n2\n\n\n\n9\n\n\n\n\n\n\n\n\n6\n\n\n\n8\n\n\n\n9\n\n2\n\n\n\n7\n\n \n \n\n2\n\n9\n3\n\n1\n\n\n\n\n\n1\n\n7\n\n5\n\n3\n\n4\n\n\n\n\n\n4\n\n9\n8\n\n2\n \n \n\n\n6\n\n\n\n7\n\n2\n\n\n\n3\n\n\n\n9\n\n\n\n\n\n\n\n\n4\n\n\n\n6\n5\n9\n\n\n\n\n\n\n\n \n \n\n\n\n1\n\n\n5\n8\n\n\n\n\n2\n8\n\n\n\n3\n\n7\n\n\n\n\n\n\n4\n2\n\n\n\n\n \n \n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n4\n\n\n\n8\n3\n\n9\n\n\n5\n\n\n \n \n\n9\n5\n\n3\n\n\n4\n\n\n\n\n\n\n\n\n\n7\n\n\n6\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n\n\n\n5\n3\n\n\n\n\n\n\n\n8\n\n\n\n\n\n\n2\n\n\n\n\n7\n\n\n1\n\n5\n\n\n \n \n\n4\n\n\n\n\n5\n3\n\n\n\n\n\n1\n\n\n7\n\n\n\n6\n\n\n\n\n3\n2\n\n\n\n8\n\n \n \n\n\n6\n\n5\n\n\n\n\n9\n\n\n\n\n4\n\n\n\n\n3\n\n\n\n\n\n\n\n\n9\n7\n\n\n\n\n\n\n\n\nThe left one is rather easy, the middle one medium and the right one is made by the Finnish Mathematician Inkala and is very hard to solve.\nLets run it:\n\n\n\n\n\n \n \n\n6\n5\n2\n7\n3\n8\n9\n4\n1\n\n\n4\n7\n1\n9\n6\n5\n2\n3\n8\n\n\n8\n9\n3\n2\n1\n4\n5\n7\n6\n \n \n\n2\n4\n9\n3\n8\n1\n7\n6\n5\n\n\n1\n8\n7\n6\n5\n2\n3\n9\n4\n\n\n5\n3\n6\n4\n7\n9\n8\n1\n2\n \n \n\n9\n6\n8\n5\n4\n7\n1\n2\n3\n\n\n3\n2\n5\n1\n9\n6\n4\n8\n7\n\n\n7\n1\n4\n8\n2\n3\n6\n5\n9\n\n\n\n\n\n\n\n \n \n\n4\n9\n1\n7\n6\n5\n8\n3\n2\n\n\n2\n8\n5\n1\n9\n3\n6\n7\n4\n\n\n3\n7\n6\n4\n2\n8\n1\n9\n5\n \n \n\n5\n1\n7\n6\n3\n4\n2\n8\n9\n\n\n6\n2\n9\n8\n5\n1\n7\n4\n3\n\n\n8\n3\n4\n9\n7\n2\n5\n6\n1\n \n \n\n9\n5\n8\n3\n1\n6\n4\n2\n7\n\n\n1\n4\n3\n2\n8\n7\n9\n5\n6\n\n\n7\n6\n2\n5\n4\n9\n3\n1\n8\n\n\n\n\n\n\n\n \n \n\n1\n4\n5\n3\n2\n7\n6\n9\n8\n\n\n8\n3\n9\n6\n5\n4\n1\n2\n7\n\n\n6\n7\n2\n9\n1\n8\n5\n4\n3\n \n \n\n4\n9\n6\n1\n8\n5\n3\n7\n2\n\n\n2\n1\n8\n4\n7\n3\n9\n5\n6\n\n\n7\n5\n3\n2\n9\n6\n4\n8\n1\n \n \n\n3\n6\n7\n5\n4\n2\n8\n1\n9\n\n\n9\n8\n4\n7\n6\n1\n2\n3\n5\n\n\n5\n2\n1\n8\n3\n9\n7\n6\n4\n\n\n\n\n\n\nwe get the solution to all three lvls of sudoku!\nHow long did this approach take to come up with the solutions?\n\nmicrobenchmark::microbenchmark(\n  solve_sudoku(easy),\n  solve_sudoku(medium),\n  solve_sudoku(Inkala),\n  times = 1\n)\n\nUnit: milliseconds\n                 expr        min         lq       mean     median         uq        max neval\n   solve_sudoku(easy)   86.80257   86.80257   86.80257   86.80257   86.80257   86.80257     1\n solve_sudoku(medium)  262.13673  262.13673  262.13673  262.13673  262.13673  262.13673     1\n solve_sudoku(Inkala) 5674.46073 5674.46073 5674.46073 5674.46073 5674.46073 5674.46073     1\n\n\nThats it!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "VH",
    "section": "",
    "text": "This is a personal Website containing thoughts about biology, programming and statistics.\n\nThe page is realized with quarto and hosted via github."
  }
]